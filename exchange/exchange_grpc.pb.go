// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: exchange.proto

package grpc_exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CurrencyExchangeService_GetAllRates_FullMethodName     = "/currencyexchange.CurrencyExchangeService/GetAllRates"
	CurrencyExchangeService_GetSpecificRate_FullMethodName = "/currencyexchange.CurrencyExchangeService/GetSpecificRate"
)

// CurrencyExchangeServiceClient is the client API for CurrencyExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CurrencyExchangeService defines methods for currency exchange operations.
type CurrencyExchangeServiceClient interface {
	// GetAllRates retrieves exchange rates for all supported currencies.
	GetAllRates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExchangeRatesResponse, error)
	// GetRate retrieves the exchange rate for a specific currency.
	GetSpecificRate(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error)
}

type currencyExchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyExchangeServiceClient(cc grpc.ClientConnInterface) CurrencyExchangeServiceClient {
	return &currencyExchangeServiceClient{cc}
}

func (c *currencyExchangeServiceClient) GetAllRates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ExchangeRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangeRatesResponse)
	err := c.cc.Invoke(ctx, CurrencyExchangeService_GetAllRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyExchangeServiceClient) GetSpecificRate(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExchangeRateResponse)
	err := c.cc.Invoke(ctx, CurrencyExchangeService_GetSpecificRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyExchangeServiceServer is the server API for CurrencyExchangeService service.
// All implementations must embed UnimplementedCurrencyExchangeServiceServer
// for forward compatibility.
//
// CurrencyExchangeService defines methods for currency exchange operations.
type CurrencyExchangeServiceServer interface {
	// GetAllRates retrieves exchange rates for all supported currencies.
	GetAllRates(context.Context, *EmptyRequest) (*ExchangeRatesResponse, error)
	// GetRate retrieves the exchange rate for a specific currency.
	GetSpecificRate(context.Context, *CurrencyRequest) (*ExchangeRateResponse, error)
	mustEmbedUnimplementedCurrencyExchangeServiceServer()
}

// UnimplementedCurrencyExchangeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrencyExchangeServiceServer struct{}

func (UnimplementedCurrencyExchangeServiceServer) GetAllRates(context.Context, *EmptyRequest) (*ExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRates not implemented")
}
func (UnimplementedCurrencyExchangeServiceServer) GetSpecificRate(context.Context, *CurrencyRequest) (*ExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificRate not implemented")
}
func (UnimplementedCurrencyExchangeServiceServer) mustEmbedUnimplementedCurrencyExchangeServiceServer() {
}
func (UnimplementedCurrencyExchangeServiceServer) testEmbeddedByValue() {}

// UnsafeCurrencyExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyExchangeServiceServer will
// result in compilation errors.
type UnsafeCurrencyExchangeServiceServer interface {
	mustEmbedUnimplementedCurrencyExchangeServiceServer()
}

func RegisterCurrencyExchangeServiceServer(s grpc.ServiceRegistrar, srv CurrencyExchangeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrencyExchangeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrencyExchangeService_ServiceDesc, srv)
}

func _CurrencyExchangeService_GetAllRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).GetAllRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyExchangeService_GetAllRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).GetAllRates(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyExchangeService_GetSpecificRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).GetSpecificRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyExchangeService_GetSpecificRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).GetSpecificRate(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyExchangeService_ServiceDesc is the grpc.ServiceDesc for CurrencyExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currencyexchange.CurrencyExchangeService",
	HandlerType: (*CurrencyExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRates",
			Handler:    _CurrencyExchangeService_GetAllRates_Handler,
		},
		{
			MethodName: "GetSpecificRate",
			Handler:    _CurrencyExchangeService_GetSpecificRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
